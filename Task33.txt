import math
import tkinter as tk
from tkinter import messagebox, filedialog
import numpy as np
import matplotlib.pyplot as plt


def load_file(file_path):
    try:
        with open(file_path, 'r') as file:
            lines = file.readlines()
            x = []
            amplitudes = []
            for line in lines:
                parts = line.strip().split()
                if len(parts) >= 2:
                    x.append(float(parts[0]))
                    amplitudes.append(float(parts[1]))
            amplitudes = np.array(amplitudes)
            return x, amplitudes
    except Exception as e:
        messagebox.showerror("Error", f"Failed to load file: {e}")
        return None, None


def format_interval(interval, num_bits):
    binary_representation = bin(interval)[2:]  # Convert to binary and remove '0b' prefix
    # Ensure the binary representation has the desired number of bits by padding with leading zeros
    return binary_representation.zfill(num_bits)


def quantize_signal_bits():
    try:
        num_bits = int(bits_entry.get())
        num_levels = 2 ** num_bits

        # Ask user to select input file using a file dialog
        file_path = filedialog.askopenfilename(filetypes=[("Text files", "*.txt")])
        if not file_path:  # User clicked Cancel or closed the file dialog
            return

        x, amplitudes = load_file(file_path)
        if amplitudes is not None:
            min_value = min(amplitudes)
            max_value = max(amplitudes)
            range_step = (max_value - min_value) / num_levels
            newIntervals = [min_value + i * range_step for i in range(num_levels)]
            midPoints = [interval + range_step / 2 for interval in newIntervals]
            encoded_signal = []
            quantized_signal = []
            interval_numbers = []  # Store the interval numbers
            intervals = []  # Store the intervals

            for sample in amplitudes:
                interval = min(range(len(newIntervals)), key=lambda i: abs(midPoints[i] - sample))
                interval_numbers.append(interval)
                intervals.append((newIntervals[interval - 1], newIntervals[interval]))

                quantized_value = midPoints[interval]
                quantized_signal.append(quantized_value)
                encoded_signal.append(interval)

            encoded_s = [format_interval(interval, num_bits) for interval in interval_numbers]
            quantized_signal = [round(sample, 2) for sample in quantized_signal]
            print(encoded_s)
            print(quantized_signal)
            quantization_error = sum(
                (original - quantized) ** 2 for original, quantized in zip(amplitudes, quantized_signal))

            output_label.config(
                text=f"Encoded Signal: {encoded_signal}\nQuantized Signal: {quantized_signal}\nQuantization Error: {quantization_error}")

            # Perform the test
            QuantizationTest1(file_path, encoded_s, quantized_signal)

            # Plot original and quantized signals
            plt.figure(figsize=(8, 6))
            plt.plot(x, amplitudes, label='Original Signal')
            plt.plot(x, quantized_signal, label='Quantized Signal')
            plt.xlabel('Index')
            plt.ylabel('Amplitude')
            plt.legend()
            plt.title('Original vs Quantized Signal')
            plt.show()

    except Exception as e:
        messagebox.showerror("Error", f"Invalid input: {e}")


def quantize_signal_levels():
    try:
        num_levels = int(bits_entry.get())

        # Ask user to select input file using a file dialog
        file_path = filedialog.askopenfilename(filetypes=[("Text files", "*.txt")])
        if not file_path:  # User clicked Cancel or closed the file dialog
            return
        x, amplitudes = load_file(file_path)
        if amplitudes is not None:
            min_value = min(amplitudes)
            max_value = max(amplitudes)
            range_step = (max_value - min_value) / num_levels
            newIntervals = [min_value + i * range_step for i in range(num_levels)]
            midPoints = [interval + range_step / 2 for interval in newIntervals]
            encoded_signal = []
            quantized_signal = []
            interval_numbers = []  # Store the interval numbers
            intervals = []  # Store the intervals
            # print(midPoints)
            # print(amplitudes)
            for sample in amplitudes:
                interval = min(range(len(newIntervals)), key=lambda i: abs(midPoints[i] - sample))
                interval_numbers.append(interval + 1)
                intervals.append((newIntervals[interval - 1], newIntervals[interval]))

                quantized_value = midPoints[interval]
                quantized_signal.append(quantized_value)
                encoded_signal.append(interval)

            encoded_s = [format_interval(interval - 1, (int)(math.log2(num_levels))) for interval in interval_numbers]
            quantized_signal = [round(sample, 3) for sample in quantized_signal]
            print(interval_numbers)
            print(encoded_s)
            print(quantized_signal)
            quantization_error = [(quantized - original) for original, quantized in zip(amplitudes, quantized_signal)]
            quantization_error = [round(sample, 3) for sample in quantization_error]
            print(quantization_error)

            output_label.config(
                text=f"Encoded Signal: {encoded_signal}\nQuantized Signal: {quantized_signal}\nQuantization Error: {quantization_error}")

            # Perform the test
            QuantizationTest2(file_path, interval_numbers, encoded_s, quantized_signal, quantization_error)

            # Plot original and quantized signals
            plt.figure(figsize=(8, 6))
            plt.plot(x, amplitudes, label='Original Signal')
            plt.plot(x, quantized_signal, label='Quantized Signal')
            plt.xlabel('Index')
            plt.ylabel('Amplitude')
            plt.legend()
            plt.title('Original vs Quantized Signal')
            plt.show()

    except Exception as e:
        messagebox.showerror("Error", f"Invalid input: {e}")


def QuantizationTest1(filename, encoded_signal, quantized_signal):
    expectedEncodedValues = []
    expectedQuantizedValues = []
    with open(r"C:\Users\AhmedRaafat\Documents\DSP Labs\OUTPUTTASK1.txt", 'r') as f:
        line = f.readline()
        line = f.readline()
        line = f.readline()
        line = f.readline()
        while line:
            # process line
            L = line.strip()
            if len(L.split(' ')) == 2:
                L = line.split(' ')
                V2 = str(L[0])
                V3 = float(L[1])
                expectedEncodedValues.append(V2)
                expectedQuantizedValues.append(V3)
                line = f.readline()
            else:
                break
    if (len(encoded_signal) != len(expectedEncodedValues)) or (len(quantized_signal) != len(expectedQuantizedValues)):
        print("QuantizationTest1 Test case failed, your signal have different length from the expected one")
        return
    for i in range(len(encoded_signal)):
        if encoded_signal[i] != expectedEncodedValues[i]:
            print("QuantizationTest1 Test case failed, your EncodedValues have different EncodedValues from the "
                  "expected one")
            return
    for i in range(len(expectedQuantizedValues)):
        if abs(quantized_signal[i] - expectedQuantizedValues[i]) < 0.01:
            continue
        else:
            print(
                "QuantizationTest1 Test case failed, your QuantizedValues have different values from the expected one")
            return
    print("QuantizationTest1 Test case passed successfully")


def QuantizationTest2(file_name, Your_IntervalIndices, Your_EncodedValues, Your_QuantizedValues, Your_SampledError):
    expectedIntervalIndices = []
    expectedEncodedValues = []
    expectedQuantizedValues = []
    expectedSampledError = []
    with open(r"C:\Users\AhmedRaafat\Documents\DSP Labs\OUTPUTTASK2.txt", 'r') as f:
        line = f.readline()
        line = f.readline()
        line = f.readline()
        line = f.readline()
        while line:
            # process line
            L = line.strip()
            if len(L.split(' ')) == 4:
                L = line.split(' ')
                V1 = int(L[0])
                V2 = str(L[1])
                V3 = float(L[2])
                V4 = float(L[3])
                expectedIntervalIndices.append(V1)
                expectedEncodedValues.append(V2)
                expectedQuantizedValues.append(V3)
                expectedSampledError.append(V4)
                line = f.readline()
            else:
                break
    if (len(Your_IntervalIndices) != len(expectedIntervalIndices)
            or len(Your_EncodedValues) != len(expectedEncodedValues)
            or len(Your_QuantizedValues) != len(expectedQuantizedValues)
            or len(Your_SampledError) != len(expectedSampledError)):
        print("QuantizationTest2 Test case failed, your signal have different length from the expected one")
        return
    for i in range(len(Your_IntervalIndices)):
        if (Your_IntervalIndices[i] != expectedIntervalIndices[i]):
            print("QuantizationTest2 Test case failed, your signal have different indicies from the expected one")
            return
    for i in range(len(Your_EncodedValues)):
        if (Your_EncodedValues[i] != expectedEncodedValues[i]):
            print(
                "QuantizationTest2 Test case failed, your EncodedValues have different EncodedValues from the expected one")
            return

    for i in range(len(expectedQuantizedValues)):
        if abs(Your_QuantizedValues[i] - expectedQuantizedValues[i]) < 0.01:
            continue
        else:
            print(
                "QuantizationTest2 Test case failed, your QuantizedValues have different values from the expected one")
            return
    for i in range(len(expectedSampledError)):
        if abs(Your_SampledError[i] - expectedSampledError[i]) < 0.01:
            continue
        else:
            print("QuantizationTest2 Test case failed, your SampledError have different values from the expected one")
            return
    print("QuantizationTest2 Test case passed successfully")


# Create main window
root = tk.Tk()
root.title("Signal Quantization")


def on_combobox_select(event):
    selected_option = combobox_var.get()
    if selected_option == "Number of Bits":
        bits_label.config(text="Number of Bits:")
        bits_entry.pack()
        levels_entry.pack_forget()
    elif selected_option == "Number of Levels":
        bits_label.config(text="Number of Levels:")
        levels_entry.pack()
        bits_entry.pack_forget()


root = tk.Tk()
root.title("Signal Quantization")


# Function to handle combobox selection
def on_combobox_select(event):
    selected_option = combobox_var.get()
    if selected_option == "Number of Bits":
        bits_label.config(text="Number of Bits:")
        bits_entry.pack()
        levels_entry.pack_forget()

        quantize_bits_button.config(command=quantize_signal_bits)  # Set command for bits quantization
    elif selected_option == "Number of Levels":
        bits_label.config(text="Number of Levels:")
        levels_entry.pack()
        bits_entry.pack_forget()
    quantize_levels_button.config(command=quantize_signal_levels)  # Set command for levels quantization


def browse_file(input_file_label=None):
    file_path = filedialog.askopenfilename()
    if file_path:
        input_file_label.config(text=f"Selected File: {file_path}")


def on_combobox_select(event):
    selected_option = combobox_var.get()
    if selected_option == "Number of Bits":
        bits_label.config(text="Number of Bits:")
        bits_entry.pack()
        levels_entry.pack_forget()
        #  browse_button.pack()
        quantize_bits_button.config(command=quantize_signal_bits)  # Set command for bits quantization
    elif selected_option == "Number of Levels":
        bits_label.config(text="Number of Levels:")
        levels_entry.pack()
        bits_entry.pack_forget()
        # browse_button.pack()
        quantize_levels_button.config(command=quantize_signal_levels)


# browse_button = tk.Button(root, text="Browse", command=browse_file)


input_file_label = tk.Label(root, text="")
input_file_label.pack()

instruction_label = tk.Label(root, text="Choose Number of Bits or Levels:")
instruction_label.pack()
# Combobox to choose between bits and levels
options = ["Number of Bits", "Number of Levels"]
combobox_var = tk.StringVar()
combobox = tk.OptionMenu(root, combobox_var, *options)
combobox.pack()
combobox_var.set(options[0])  # Set default option
combobox.bind("<Configure>", on_combobox_select)

# Number of Bits Entry
bits_label = tk.Label(root, text="Number of Bits:")
bits_entry = tk.Entry(root)

# Number of Levels Entry
levels_label = tk.Label(root, text="Number of Levels:")
levels_entry = tk.Entry(root)

quantize_bits_button = tk.Button(root, text="Quantize with Bits", command=quantize_signal_bits)
quantize_bits_button.pack()

quantize_levels_button = tk.Button(root, text="Quantize with Levels", command=quantize_signal_levels)
quantize_levels_button.pack()

# Quantization Label
quantization_label = tk.Label(root, text="")
quantization_label.pack()

# Output Label
output_label = tk.Label(root, text="")
output_label.pack()

# Start the main loop
root.mainloop()
